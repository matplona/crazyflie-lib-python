from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from extension.extended_crazyflie import ExtendedCrazyFlie
import time
from typing import Any, Callable

# type aliases
Callback = Callable[[int, str, Any], None]
Predicate = Callable[[Any], bool]

class ParametersManager:
    def __init__(self, ecf : ExtendedCrazyFlie) -> None:
                self.__ecf : ExtendedCrazyFlie = ecf
                self.__variables = {}
    
    def __cb(self, name:str, value):
        ts = int(time.time()*1000)
        value = float(value)
        group = name.split('.')[0]
        name = name.split('.')[1]
        # check if the predicate is true
        if(self.__variables[group][name]["predicate"](value)):
            #call the callback with the following parameter:
                #   -   timestamp
                #   -   group.name
                #   -   value
            self.__variables[group][name]["cb"](ts, name, value)

    def add_variable(self, group, name):
        if group not in self.__variables:
            self.__variables[group] = {} # init group dict

        if name in self.__variables[group] :
            #if variable already exist raise exception
            raise Exception("Variable {}.{} already exist in ParametersManager.".format(group,name)) 

        self.__variables[group][name] = {
            "group":group,
            "name":name,
            "cb": None, # initial empty watcher
            "predicate" : lambda _ : True # inital not constrainted predicate
        }

    def set_watcher(self, group, name, cb : Callback):
        """
        Add a callback to the variable specified, when the value of this variable change, this function will be 
        called with 3 parameter: timestamp, name and value.
        [!] The timestamp is generated by the python script not by the CF
        [!] Watcher is unique, only one per variable is allowed.
        """
        if(group in self.__variables and name in self.__variables[group]):
            if self.__variables[group][name]["cb"] is None:
                self.__ecf.cf.param.add_update_callback(group, name, self.__cb)
            self.__variables[group][name]["cb"] = cb
        else:
            raise Exception("Variable not found in the ParametersManager, you should add before use it.")

    def set_predicate(self, group, name, pred : Predicate):
        """
        Add a predicate to the variable such that it call the watcher only when the predicate returns true
        """
        if(group in self.__variables and name in self.__variables[group]):
            self.__variables[group][name]["predicate"] = pred
        else:
            raise Exception("Variable not found in the ParametersManager, you should add before use it.")

    def set_value(self, group, name, value):
        """
        Set the value of a parameter direcly on board of the CF. 
        If the variable is not found is ok but it will not be added.
        [!] Parameter must be according to the toc.
        [!] Parameter must be RW to set its value.
        """
        self.__ecf.cf.param.set_value("{}.{}".format(group, name), value)

    def get_value(self, group, name):
        """
        Get the value of a parameter direcly on board of the CF. 
        If the variable is not found in the manager is ok but it will not be added.
        [!] Parameter must be according to the toc.
        """
        return self.__ecf.cf.param.get_value("{}.{}".format(group, name))